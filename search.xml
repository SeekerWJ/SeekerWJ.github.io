<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习笔记Day2_1</title>
      <link href="2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day2_1/"/>
      <url>2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day2_1/</url>
      
        <content type="html"><![CDATA[<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="1-有关python中if语句的示例"><a href="#1-有关python中if语句的示例" class="headerlink" title="1. 有关python中if语句的示例"></a>1. 有关python中if语句的示例</h3><pre class=" language-python"><code class="language-python">cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'bmw'</span><span class="token punctuation">,</span> <span class="token string">'subaru'</span><span class="token punctuation">,</span> <span class="token string">'toyota'</span><span class="token punctuation">]</span><span class="token keyword">for</span> car <span class="token keyword">in</span> cars<span class="token punctuation">:</span>    <span class="token keyword">if</span> car <span class="token operator">==</span> <span class="token string">'audi'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>AUDIBmwSubaruToyota</code></pre><p>对于python来说，比较相等于不相等基本与C一致</p><h3 id="2-检查多个条件"><a href="#2-检查多个条件" class="headerlink" title="2. 检查多个条件"></a>2. 检查多个条件</h3><ul><li>利用and来检查，即“&amp;&amp;”运算</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">200</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token boolean">False</span></code></pre><ul><li>利用or来检查，即“||”运算</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">=</span> <span class="token number">200</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token boolean">True</span></code></pre><h3 id="3-检查特殊值"><a href="#3-检查特殊值" class="headerlink" title="3. 检查特殊值"></a>3. 检查特殊值</h3><p>这是python特殊与C的一个地方</p><p>在python中要在列表中找出不同的元素值要容易的多</p><pre class=" language-python"><code class="language-python">cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'bmw'</span><span class="token punctuation">,</span> <span class="token string">'subaru'</span><span class="token punctuation">,</span> <span class="token string">'toyota'</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'abc'</span> <span class="token keyword">in</span> cars<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#判断'abc'元素是否在cars列表中</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token boolean">False</span></code></pre><p>同理，可以利用’abc’ not in cars来判断元素是否不在列表中</p><h3 id="4-if-elif-else结构"><a href="#4-if-elif-else结构" class="headerlink" title="4. if-elif-else结构"></a>4. if-elif-else结构</h3><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">12</span><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">2</span></code></pre><p>需要注意的时，利用if-elif-else结构时，只能筛选出一个条件，每当遇到了合适的条件就做出相应的选择，接着运行if语句下面的语句，不再进行其他条件的判断</p><p>如果需要用到多个条件的判断的话，还是应当使用if的复合结构</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记Day1_2</title>
      <link href="2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day1_2/"/>
      <url>2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day1_2/</url>
      
        <content type="html"><![CDATA[<h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><h3 id="1-利用for循环来打印整个列表中所有的元素"><a href="#1-利用for循环来打印整个列表中所有的元素" class="headerlink" title="1. 利用for循环来打印整个列表中所有的元素"></a>1. 利用for循环来打印整个列表中所有的元素</h3><pre class=" language-python"><code class="language-python">magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'alice'</span><span class="token punctuation">,</span><span class="token string">'david'</span><span class="token punctuation">,</span><span class="token string">'carolina'</span><span class="token punctuation">]</span><span class="token keyword">for</span> magician <span class="token keyword">in</span> magicians<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>magician<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", that was a great trick!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I can't wait to see your next trick, "</span> <span class="token operator">+</span> magician<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".\n "</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出结果</span>Alice<span class="token punctuation">,</span> that was a great trick!I can't wait to see your next trick<span class="token punctuation">,</span> Alice<span class="token punctuation">.</span>David<span class="token punctuation">,</span> that was a great trick!I can't wait to see your next trick<span class="token punctuation">,</span> David<span class="token punctuation">.</span>Carolina<span class="token punctuation">,</span> that was a great trick!I can't wait to see your next trick<span class="token punctuation">,</span> Carolina<span class="token punctuation">.</span>    </code></pre><p>​    对python中for循环的一些理解</p><p>​    可以清楚的知道”for A in B”是将B列表中的每个元素放到A中来进行操作的</p><h2 id="创建数字列表"><a href="#创建数字列表" class="headerlink" title="创建数字列表"></a>创建数字列表</h2><h3 id="1-使用函数range-x-y-来创建一系列数字"><a href="#1-使用函数range-x-y-来创建一系列数字" class="headerlink" title="1. 使用函数range(x,y)来创建一系列数字"></a>1. 使用函数range(x,y)来创建一系列数字</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span></code></pre><p>​    可以注意到是使用range(1,5)只生成了1~4并没有生成5</p><p>​    其意义为从1开始生成数字，但是小于5</p><h3 id="2-使用list-与range-配合来生成一个数字列表"><a href="#2-使用list-与range-配合来生成一个数字列表" class="headerlink" title="2. 使用list()与range()配合来生成一个数字列表"></a>2. 使用list()与range()配合来生成一个数字列表</h3><pre class=" language-python"><code class="language-python">numbers <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre><p>​    list()的作用就是将一个列变成一行</p><p>​    对于range()的参数来说，还可以再加入步长</p><pre class=" language-python"><code class="language-python">even_numbers <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>even_numbers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span></code></pre><p>​    range(2,19,3)就是从2开始一直到小于19，步长为3</p><h3 id="3-列表解析"><a href="#3-列表解析" class="headerlink" title="3. 列表解析"></a>3. 列表解析</h3><pre class=" language-python"><code class="language-python">squares <span class="token operator">=</span> <span class="token punctuation">[</span>value<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span></code></pre><p>​    所谓列表解析就是将for循环和创建新元素合成一行，并自动附加新元素</p><p>​    即，将for循环中的每个语句赋值给value，在将value进行平方操作</p><p>​    <em>注：一定要加上方括号</em></p><h3 id="4-使用列表的一部分"><a href="#4-使用列表的一部分" class="headerlink" title="4. 使用列表的一部分"></a>4. 使用列表的一部分</h3><ul><li><p>切片</p><p>所谓切片，即是使用列表的部分元素</p><pre class=" language-python"><code class="language-python">players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span></code></pre><p>player[0:3]意为，从0元素开始，直到第3号元素之前结束</p></li><li><p>复制列表</p><p>要复制列表，可创建一个包含整个列表的切片</p><pre class=" language-python"><code class="language-python">A_players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">]</span>B_players <span class="token operator">=</span> A_players<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>A_players<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>B_players<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">]</span></code></pre><h2 id="5-元组"><a href="#5-元组" class="headerlink" title="5. 元组"></a>5. 元组</h2><p>所谓元组，就是一系列元素值不可以修改的列表,用圆括号来标识</p><p>若要对元组元素尝试进行修改时，编译器则会报错</p><pre class=" language-python"><code class="language-python">dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token comment" spellcheck="true">#错误显示  File "d:/Python_Test/Day1_2020_8_31/demo.py", line 4, in &lt;module></span>    dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment  File <span class="token string">"d:/Python_Test/Day1_2020_8_31/demo.py"</span><span class="token punctuation">,</span> line <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    dimensions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment</code></pre><p>虽然不能对元组中的单个元素进行修改，但是可以给存储元组的变量进行赋值，从而去改变整个元组的尺寸和元素的值</p><pre class=" language-python"><code class="language-python">dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>dimensions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dimensions<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>同样的，也可以利用for循环来对元组进行遍历</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记Day1_1</title>
      <link href="2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day1_1/"/>
      <url>2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day1_1/</url>
      
        <content type="html"><![CDATA[<h2 id="修改-添加和删除列表元素"><a href="#修改-添加和删除列表元素" class="headerlink" title="修改,添加和删除列表元素"></a>修改,添加和删除列表元素</h2><p>​    <em>对于列表来说a[-1]是选择列表的最后一个元素</em></p><h3 id="1-修改列表元素"><a href="#1-修改列表元素" class="headerlink" title="1. 修改列表元素"></a>1. 修改列表元素</h3><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span>motorcycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'ducati'</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span></code></pre><p>输出结果</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ducati'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span></code></pre><p>几乎同C语言差不多</p><h3 id="2-对列表添加元素"><a href="#2-对列表添加元素" class="headerlink" title="2. 对列表添加元素"></a>2. 对列表添加元素</h3><h4 id="在列表末尾添加元素-append"><a href="#在列表末尾添加元素-append" class="headerlink" title="- 在列表末尾添加元素(append)"></a>- 在列表末尾添加元素(append)</h4><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>motorcycles<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出结果</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span></code></pre><h4 id="在列表中插入元素-insert"><a href="#在列表中插入元素-insert" class="headerlink" title="- 在列表中插入元素(insert)"></a>- 在列表中插入元素(insert)</h4><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>motorcycles<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'NBNB!'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#在第二个元素后面插入一个“NBNB!元素”</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'NBNB!'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h3 id="3-从列表中删除元素"><a href="#3-从列表中删除元素" class="headerlink" title="3. 从列表中删除元素"></a>3. 从列表中删除元素</h3><h4 id="使用del语句删除元素"><a href="#使用del语句删除元素" class="headerlink" title="- 使用del语句删除元素"></a>- 使用del语句删除元素</h4><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span><span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#删除列表的第二个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span></code></pre><h4 id="使用pop-删除元素"><a href="#使用pop-删除元素" class="headerlink" title="- 使用pop()删除元素"></a>- 使用pop()删除元素</h4><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span>popped_motorcycle <span class="token operator">=</span> motorcycles<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使用pop将列表最顶端的元素弹出</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>popped_motorcycle<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>c <span class="token comment" spellcheck="true">#这里表明C元素已经被删除</span></code></pre><p><strong>对于pop()语句的一些理解</strong></p><p>​    使用pop()来删除元素相当于将一个元素从列表中弹出，但仍可以使用它。</p><p>​    对于del语句来说则没有这种效果</p><p>​    通过pop(x)也可以选择弹出列表中任意位置的元素</p><h4 id="利用remove-语句，根据值来删除列表中的元素"><a href="#利用remove-语句，根据值来删除列表中的元素" class="headerlink" title="- 利用remove()语句，根据值来删除列表中的元素"></a>- 利用remove()语句，根据值来删除列表中的元素</h4><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span>motorcycles<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除一个指定的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span></code></pre><p><em>使用remove()来删除元素时，也可以接着使用它的值，只需要在之前对他进行一个变量赋值即可</em></p><h3 id="4-组织列表"><a href="#4-组织列表" class="headerlink" title="4. 组织列表"></a>4. 组织列表</h3><h4 id="使用sort-来对列表进行永久排序"><a href="#使用sort-来对列表进行永久排序" class="headerlink" title="- 使用sort()来对列表进行永久排序"></a>- 使用sort()来对列表进行永久排序</h4><pre class=" language-python"><code class="language-python">cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">]</span>cars<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#按字母来进行排序</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span></code></pre><p><em>同时也可以对sort的参数添加为reverse=Ture从而按某种排列顺序进行倒叙排列</em></p><pre class=" language-python"><code class="language-python">cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">]</span>cars<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span>cars<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span></code></pre><p><strong>与此类似的可以利用sorted()来对列表进行临时性的排序</strong></p><h4 id="使用reverse-倒着打印列表"><a href="#使用reverse-倒着打印列表" class="headerlink" title="- 使用reverse()倒着打印列表"></a>- 使用reverse()倒着打印列表</h4><pre class=" language-python"><code class="language-python">cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span>cars<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span></code></pre><p><em>使用reverse()来倒序打印列表时，只是单纯的倒序原有列表而已，并无排列顺序</em></p><h4 id="使用len-来确定列表长度"><a href="#使用len-来确定列表长度" class="headerlink" title="- 使用len()来确定列表长度"></a>- 使用len()来确定列表长度</h4><pre class=" language-python"><code class="language-python">cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">]</span>a <span class="token operator">=</span> len<span class="token punctuation">(</span>cars<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">4</span></code></pre><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记Day5_1</title>
      <link href="2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day5_1/"/>
      <url>2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day5_1/</url>
      
        <content type="html"><![CDATA[<p>所谓class就是</p><p>包含了多个函数的集体，并且其中也有定义好的变量(属性)</p><p>Class的优点是可以保存状态 </p><p>Class就有点像是把多个函数进行封装</p><p>class中的函数称之为方法，变量称之为属性，对象称之为实例</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="1-创建和使用类"><a href="#1-创建和使用类" class="headerlink" title="1.创建和使用类"></a>1.创建和使用类</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is now sitting"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">roll_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"rolled over!"</span><span class="token punctuation">)</span>my_dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'wuhu~~'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span>my_dog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">2</span>Wuhu<span class="token operator">~</span><span class="token operator">~</span> <span class="token keyword">is</span> now sitting</code></pre><p>​    在python中，约定大写的是类</p><h3 id="2-使用类和实例，默认和修改属性的值"><a href="#2-使用类和实例，默认和修改属性的值" class="headerlink" title="2. 使用类和实例，默认和修改属性的值"></a>2. 使用类和实例，默认和修改属性的值</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"miles on it"</span><span class="token punctuation">)</span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span><span class="token string">'A6'</span><span class="token punctuation">,</span><span class="token string">'2020'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="修改属性值的途径"><a href="#修改属性值的途径" class="headerlink" title="- 修改属性值的途径"></a>- 修改属性值的途径</h4><ol><li><p>直接修改属性的值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it"</span><span class="token punctuation">)</span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span><span class="token string">'A6'</span><span class="token punctuation">,</span><span class="token string">'2020'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">#在这里直接修改属性的值了</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">2020</span> audi A6This car has <span class="token number">0</span> miles on itThis car has <span class="token number">20</span> miles on it</code></pre></li><li><p>通过方法修改属性的值</p><p>通过这种方法，无需直接访问属性，可将值直接传递给一个方法，由该方法来对需要改变的属性赋值，这种操作更为直观方便。</p><p>这种方法在对修改属性值的时候也可以对其做一些其他操作，比如当修改的值小于原来的值时，禁止修改等…</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#定义一个改变属性的方法    </span>    <span class="token keyword">def</span> <span class="token function">updata_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileagemy_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span><span class="token string">'A6'</span><span class="token punctuation">,</span><span class="token string">'2020'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#直接调用该方法来进行赋值</span>my_new_car<span class="token punctuation">.</span>updata_odometer<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">2020</span> audi A6This car has <span class="token number">0</span> miles on itThis car has <span class="token number">23</span> miles on it</code></pre></li></ol><h3 id="3-继承"><a href="#3-继承" class="headerlink" title="3. 继承"></a>3. 继承</h3><p>当需要编写的类是另一个现成类的特殊版本，可以使用继承。</p><p>子类继承了父类的属性和方法，同时也可以拥有属于自己的特殊的属性和方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">updata_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage<span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将父类与子类关联起来，让子类包含父类的所有属性，方法</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#定义自己特有的属性和方法</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> <span class="token number">70</span>    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"kWh battery."</span><span class="token punctuation">)</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span><span class="token string">'model s'</span><span class="token punctuation">,</span><span class="token string">'2016'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">2016</span> tesla model sThis car has a 70kWh battery<span class="token punctuation">.</span></code></pre><h4 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="- 重写父类的方法"></a>- 重写父类的方法</h4><p>对于父类的方法，当他不再符合子类的需要时，可在子类中对其进行重写。重写后的父类方法需要与原父类方法同名，python在执行该方法的时候优先考虑的是子类中的方法。</p><p>在Car类中:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fill_gas_tank</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"There are "</span><span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>gas<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" in this car"</span><span class="token punctuation">)</span></code></pre><p>在ElectricCar类中：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fill_gas_tank</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car doesn't need a gas tank!"</span><span class="token punctuation">)</span></code></pre><p>使用实例时:</p><pre class=" language-python"><code class="language-python">my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span><span class="token string">'model s'</span><span class="token punctuation">,</span><span class="token string">'2016'</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>fill_gas_tank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>This car doesn't need a gas tank!</code></pre><p>以上即实现了对父类方法的重写</p><h4 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="- 将实例用作属性"></a>- 将实例用作属性</h4><p>即，将一个类赋值给另一个类中的某个属性</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#使用类和实例</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">updata_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage<span class="token keyword">class</span> <span class="token class-name">Battery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>battery_size<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> battery_size    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" kWh battery."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将父类与子类关联起来，让子类包含父类的所有属性，方法</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span>model<span class="token punctuation">,</span>year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> Battery<span class="token punctuation">(</span><span class="token punctuation">)</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'Car'</span><span class="token punctuation">,</span><span class="token string">'Model s'</span><span class="token punctuation">,</span><span class="token string">'2020'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记Day4_2</title>
      <link href="2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day4_2/"/>
      <url>2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day4_2/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1. 定义函数"></a>1. 定义函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">display_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I have learned the function in this section"</span><span class="token punctuation">)</span>display_message<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>I have learned the function <span class="token keyword">in</span> this section</code></pre><p>​    在python中定义函数用的是def语句</p><h3 id="2-向函数传递参数"><a href="#2-向函数传递参数" class="headerlink" title="2. 向函数传递参数"></a>2. 向函数传递参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">display_message</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pet_name<span class="token punctuation">)</span>display_message<span class="token punctuation">(</span><span class="token string">'Dog'</span><span class="token punctuation">,</span> <span class="token string">'hurry'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Doghurry</code></pre><p>要注意函数的参数顺序一定要正确！</p><p>但是如下时，可以不注意函数参数顺序</p><p>关键字实参</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">display_message</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pet_name<span class="token punctuation">)</span>display_message<span class="token punctuation">(</span>pet_name <span class="token operator">=</span> <span class="token string">'hurrt'</span><span class="token punctuation">,</span>animal_type <span class="token operator">=</span> <span class="token string">'Dog'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Doghurrt</code></pre><p>若函数如此</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">display_message</span><span class="token punctuation">(</span>pet_name<span class="token punctuation">,</span> animal_type <span class="token operator">=</span> <span class="token string">'Dog'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pet_name<span class="token punctuation">)</span>display_message<span class="token punctuation">(</span>pet_name <span class="token operator">=</span> <span class="token string">'hurrt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Doghurrt</code></pre><p>则是默认animal_type为dog，即该函数有默认值</p><p>但需要注意的是，该函数的参数顺序需要一致</p><h3 id="3-返回值"><a href="#3-返回值" class="headerlink" title="3. 返回值"></a>3. 返回值</h3><p>python中的返回值和C中差不多</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> last_name    <span class="token keyword">return</span> full_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>musician <span class="token operator">=</span> get_message<span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span><span class="token string">'weijun'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Wangweijun</code></pre><h4 id="让实参变为可选的"><a href="#让实参变为可选的" class="headerlink" title="让实参变为可选的"></a>让实参变为可选的</h4><p>即，函数可以根据输入实参的数目来进行具体的操作</p><p>其原理是python会将非空字符串解读成True</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> middle_name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> middle_name<span class="token punctuation">:</span>        full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> middle_name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>last_name     <span class="token keyword">else</span><span class="token punctuation">:</span>        full_name <span class="token operator">=</span> first_name <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> last_name    <span class="token keyword">return</span> full_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>musician <span class="token operator">=</span> get_message<span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span><span class="token string">'weijun'</span><span class="token punctuation">,</span><span class="token string">'NB'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span>musician <span class="token operator">=</span> get_message<span class="token punctuation">(</span><span class="token string">'wang'</span><span class="token punctuation">,</span><span class="token string">'weijun'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Wang Nb WeijunWang Weijun</code></pre><h3 id="4-返回字典"><a href="#4-返回字典" class="headerlink" title="4. 返回字典"></a>4. 返回字典</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_person</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    person <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'first': first_name, 'last': last_name&amp;#125;</span>    <span class="token keyword">return</span> personmusician <span class="token operator">=</span> build_person<span class="token punctuation">(</span><span class="token string">'jimi'</span><span class="token punctuation">,</span><span class="token string">'hendrix'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>musician<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'first': 'jimi', 'last': 'hendrix'&amp;#125;</span></code></pre><h3 id="5-传递列表"><a href="#5-传递列表" class="headerlink" title="5. 传递列表"></a>5. 传递列表</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>        msg <span class="token operator">=</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>usernames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token string">'nice'</span><span class="token punctuation">,</span><span class="token string">'wocao'</span><span class="token punctuation">]</span>greet_user<span class="token punctuation">(</span>usernames<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>AbcNiceWocao</code></pre><p>​    即，将列表作为参数即可</p><h3 id="6-修改列表中的参数"><a href="#6-修改列表中的参数" class="headerlink" title="6.修改列表中的参数"></a>6.修改列表中的参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_models</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span>completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> unprinted_designs<span class="token punctuation">:</span>        current_design <span class="token operator">=</span> unprinted_designs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printing model: "</span> <span class="token operator">+</span> current_design<span class="token punctuation">)</span>        completed_models<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_design<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_completed_models</span><span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe following models have been printed:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> completed_model <span class="token keyword">in</span> completed_models<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>completed_model<span class="token punctuation">)</span>unprinted_designs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'iphone case'</span><span class="token punctuation">,</span><span class="token string">'robot'</span><span class="token punctuation">,</span><span class="token string">'fuck!!!'</span><span class="token punctuation">]</span>completed_models <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>print_models<span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span>completed_models<span class="token punctuation">)</span>show_completed_models<span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>printing model<span class="token punctuation">:</span> fuck!!!printing model<span class="token punctuation">:</span> robotprinting model<span class="token punctuation">:</span> iphone caseThe following models have been printed<span class="token punctuation">:</span>fuck!!!robotiphone case</code></pre><p>在python中，对函数传递进去的列表是可以直接修改的，不像C语言使用指针，想要保存原来列表中的值，可以采用使用列表副本的方式</p><h3 id="7-禁止函数修改列表"><a href="#7-禁止函数修改列表" class="headerlink" title="7. 禁止函数修改列表"></a>7. 禁止函数修改列表</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_models</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span>completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> unprinted_designs<span class="token punctuation">:</span>        current_design <span class="token operator">=</span> unprinted_designs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printing model: "</span> <span class="token operator">+</span> current_design<span class="token punctuation">)</span>        completed_models<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_design<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_completed_models</span><span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe following models have been printed:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> completed_model <span class="token keyword">in</span> completed_models<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>completed_model<span class="token punctuation">)</span>unprinted_designs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'iphone case'</span><span class="token punctuation">,</span><span class="token string">'robot'</span><span class="token punctuation">,</span><span class="token string">'fuck!!!'</span><span class="token punctuation">]</span>completed_models <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#对参数采用列表副本的形式</span>print_models<span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>completed_models<span class="token punctuation">)</span>show_completed_models<span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>printing model<span class="token punctuation">:</span> fuck!!!printing model<span class="token punctuation">:</span> robotprinting model<span class="token punctuation">:</span> iphone caseThe following models have been printed<span class="token punctuation">:</span>fuck!!!robotiphone case<span class="token punctuation">[</span><span class="token string">'iphone case'</span><span class="token punctuation">,</span> <span class="token string">'robot'</span><span class="token punctuation">,</span> <span class="token string">'fuck!!!'</span><span class="token punctuation">]</span></code></pre><p>​    可以看到，列表unprinted_designs还是原来的值，并没有改变</p><h3 id="8-结合使用位置实参和任意参数实参"><a href="#8-结合使用位置实参和任意参数实参" class="headerlink" title="8. 结合使用位置实参和任意参数实参"></a>8. 结合使用位置实参和任意参数实参</h3><p>如果要让函数接收不同类型的实参(位置实参，关键字实参，任意数量实参)，必须在函数定义中将接纳任意数量实参的形参放在最后。</p><p>python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。所以任意数量形参在函数中以元组形式存在</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#*toppings是作为存储任意实参的作用</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nMaking a"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span>             <span class="token string">"-inch pizza with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> topping <span class="token keyword">in</span> toppings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"- "</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">'pepperoin'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'fuck'</span><span class="token punctuation">,</span><span class="token string">'tomato'</span><span class="token punctuation">,</span><span class="token string">'yes!!!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Making a16<span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">-</span> pepperoinMaking a12<span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">-</span> fuck<span class="token operator">-</span> tomato<span class="token operator">-</span> yes!!!</code></pre><h3 id="10-使用任意数量实参"><a href="#10-使用任意数量实参" class="headerlink" title="10. 使用任意数量实参"></a>10. 使用任意数量实参</h3><p>有时，函数需要接受任意数量的实参，这时，可将函数编写成能够接受任意数量的键值对</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_profile</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>last<span class="token punctuation">,</span><span class="token operator">**</span>user_info<span class="token punctuation">)</span><span class="token punctuation">:</span>    profile <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    profile<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> first    profile<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> last    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> user_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        profile<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> profileuser_profile <span class="token operator">=</span> build_profile<span class="token punctuation">(</span><span class="token string">'albert'</span><span class="token punctuation">,</span><span class="token string">'einstein'</span><span class="token punctuation">,</span>location <span class="token operator">=</span> <span class="token string">'princeton'</span><span class="token punctuation">,</span>field <span class="token operator">=</span> <span class="token string">'physics'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#相其中填充入新的键值对</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_profile<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'first_name': 'albert', 'last_name': 'einstein', 'location': 'princeton', 'field': 'physics'&amp;#125;</span></code></pre><h3 id="11-将函数存储在模块中"><a href="#11-将函数存储在模块中" class="headerlink" title="11. 将函数存储在模块中"></a>11. 将函数存储在模块中</h3><p>要让函数是可导入的，首先得创建模块。模块是扩展名为.py的文件，包含要导入程序中的代码。</p><p><strong>pizza.py文件</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nMaking a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span>         <span class="token string">"-inch pizza with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> topping <span class="token keyword">in</span> toppings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"- "</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span></code></pre><p><strong>making_pizzas.py文件</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pizza<span class="token comment" spellcheck="true">#使用import打开pizza文件，并将其中所有的函数都复制到这个程序中</span><span class="token comment" spellcheck="true">#导入函数</span>pizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'123123'</span><span class="token punctuation">)</span>pizza<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushroom'</span><span class="token punctuation">,</span><span class="token string">'green peppers'</span><span class="token punctuation">,</span><span class="token string">'extra cheese'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Making a <span class="token number">16</span><span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">-</span> <span class="token number">123123</span>Making a <span class="token number">12</span><span class="token operator">-</span>inch pizza <span class="token keyword">with</span> the following toppings<span class="token punctuation">:</span><span class="token operator">-</span> mushroom<span class="token operator">-</span> green peppers<span class="token operator">-</span> extra cheese</code></pre><h3 id="12-导入特点的函数"><a href="#12-导入特点的函数" class="headerlink" title="12.导入特点的函数"></a>12.导入特点的函数</h3><p>类似的，还可使用from module_name import function_name</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pizza <span class="token keyword">import</span> make_pizzamake_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'123123'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'mushroom'</span><span class="token punctuation">,</span><span class="token string">'green peppers'</span><span class="token punctuation">,</span><span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><p>其输出结果也是相同的</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记Day4_1</title>
      <link href="2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day4_1/"/>
      <url>2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day4_1/</url>
      
        <content type="html"><![CDATA[<h2 id="用户输入与while循环"><a href="#用户输入与while循环" class="headerlink" title="用户输入与while循环"></a>用户输入与while循环</h2><h3 id="使用input-语句来输入语句"><a href="#使用input-语句来输入语句" class="headerlink" title="使用input()语句来输入语句"></a>使用input()语句来输入语句</h3><p>当需要输入的语句是数字并且要使用这些数字时，可以利用int()这一语句来解决</p><p>int()语句的作用就是将字符型转换成数据形式</p><pre class=" language-python"><code class="language-python">height <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"How tall are you,in inches?"</span><span class="token punctuation">)</span>height <span class="token operator">=</span> int<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token keyword">if</span> height <span class="token operator">>=</span> <span class="token number">36</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nYou're tall enough to ride"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nYou'll not be able to ride"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>How tall are you<span class="token punctuation">,</span><span class="token keyword">in</span> inches?<span class="token number">22</span>You'll <span class="token operator">not</span> be able to ride</code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>python中的循环与C中基本一致</p><pre class=" language-python"><code class="language-python">current_number <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> current_number <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#当条件运行为真时运行循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>current_number<span class="token punctuation">)</span>    current_number <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span></code></pre><h4 id="使用标志"><a href="#使用标志" class="headerlink" title="- 使用标志"></a>- 使用标志</h4><p>​    即设置某一变量作为标志，Ture时循环执行，False时循环中断</p><pre class=" language-python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string">"Tell me something: "</span>active <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> active<span class="token punctuation">:</span>    message <span class="token operator">=</span> input<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token keyword">if</span> message <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        active <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束！"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Tell me something<span class="token punctuation">:</span> niceniceTell me something<span class="token punctuation">:</span> quit循环结束！</code></pre><p>注意：当循环条件为False时是直接跳出循环，并不是等待循环</p><h4 id="使用break退出循环"><a href="#使用break退出循环" class="headerlink" title="- 使用break退出循环"></a>- 使用break退出循环</h4><p>直接退出循环，不再执行下面的语句</p><h4 id="continue"><a href="#continue" class="headerlink" title="- continue"></a>- continue</h4><p>使用continue即跳过下面的语句，直接回到循环的第一个语句来执行</p><h3 id="使用while来处理列表和循环"><a href="#使用while来处理列表和循环" class="headerlink" title="使用while来处理列表和循环"></a>使用while来处理列表和循环</h3><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'banana'</span><span class="token punctuation">,</span><span class="token string">'peach'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> a<span class="token punctuation">:</span>    c<span class="token operator">=</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"friut: "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">for</span> d <span class="token keyword">in</span> b<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>friut<span class="token punctuation">:</span> Peachfriut<span class="token punctuation">:</span> Bananafriut<span class="token punctuation">:</span> ApplePeachBananaApple</code></pre><p>注：当列表为空时，循环不再继续</p><h3 id="使用用户输入来填充字典"><a href="#使用用户输入来填充字典" class="headerlink" title="使用用户输入来填充字典"></a>使用用户输入来填充字典</h3><pre class=" language-python"><code class="language-python">responses<span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>polling_active <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> polling_active<span class="token punctuation">:</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"\nWhat is your name? "</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Which dou you like best?"</span><span class="token punctuation">)</span>    responses<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> response    repeat <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Would you like to let another person respond?(yes/no) "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> repeat <span class="token operator">==</span> <span class="token string">'no'</span><span class="token punctuation">:</span>        polling_active <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n----Poll Result----"</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>response <span class="token keyword">in</span> responses<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"would like to climb "</span> <span class="token operator">+</span> response <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记Day3_1</title>
      <link href="2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day3_1/"/>
      <url>2020/09/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day3_1/</url>
      
        <content type="html"><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p><em>注：</em></p><p>​    <em>字典{}</em></p><p>​    <em>元组()</em></p><p>​    <em>列表[]</em></p><p>所谓字典即是一系列的键-值对。每一个键都与一个值相关联。与键相关联的可以使数字、字符串、列表，也可以是字典</p><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color':'green','points':'5'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>green</code></pre><h2 id="对字典添加键值对"><a href="#对字典添加键值对" class="headerlink" title="对字典添加键值对"></a>对字典添加键值对</h2><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color':'green','points':'5'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>alien_0<span class="token punctuation">[</span><span class="token string">'x_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>alien_0<span class="token punctuation">[</span><span class="token string">'y_position'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>green<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'green', 'points': '5', 'x_position': 0, 'y_position': 25&amp;#125;</span></code></pre><p>​    对字典来说，不关心所谓键值对的顺序，只关心键和值之间的联系。有时为了方便键值对的添加操作，可以先创建一个空的字典，再分行添加键值对</p><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'green'</span>alien_0<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'green', 'points': 5&amp;#125;</span></code></pre><p>​    使用字典来存储用户提供的数据或在编写能自动生成大量键值对的代码时，通常都先定义一个空字典</p><h2 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h2><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color':'green','points':'5'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span>alien_0<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'yellow'</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'green', 'points': '5'&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'yellow', 'points': '5'&amp;#125;</span></code></pre><h2 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h2><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color':'green','points':'5'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span><span class="token keyword">del</span> alien_0<span class="token punctuation">[</span><span class="token string">'points'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>alien_0<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'green', 'points': '5'&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'green'&amp;#125;</span></code></pre><p>​    对于想删除的键值对，可以利用del语句来将其删除</p><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><h3 id="1-遍历所有的键-值对"><a href="#1-遍历所有的键-值对" class="headerlink" title="1. 遍历所有的键-值对"></a>1. 遍历所有的键-值对</h3><pre class=" language-python"><code class="language-python">user_0 <span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'wangweijun'</span><span class="token punctuation">,</span>    <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'NB!'</span><span class="token punctuation">,</span>    <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'taiNB!'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> user_0<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#利用items可以返回键值数组</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Key<span class="token punctuation">:</span> usernameValue<span class="token punctuation">:</span> wangweijunKey<span class="token punctuation">:</span> firstValue<span class="token punctuation">:</span> NB!Key<span class="token punctuation">:</span> lastValue<span class="token punctuation">:</span> taiNB!</code></pre><p>​    利用key来存储键，利用value来存储值</p><p>​    user_0.items()的作用就是返回可遍历的键值对</p><p>​    若要返回字典中所有的键，则需要利用user_0.keys()</p><pre class=" language-python"><code class="language-python">Key<span class="token punctuation">:</span> usernameKey<span class="token punctuation">:</span> firstKey<span class="token punctuation">:</span> lastuser_0 <span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'wangweijun'</span><span class="token punctuation">,</span>    <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'NB!'</span><span class="token punctuation">,</span>    <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'taiNB!'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">for</span> key <span class="token keyword">in</span> user_0<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nKey: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Key<span class="token punctuation">:</span> usernameKey<span class="token punctuation">:</span> firstKey<span class="token punctuation">:</span> last</code></pre><p>​    同理，若要返回字典中所有的值，利用user_0.values()即可</p><p>​    为了剔除重复项，可以使用set()语句选择出集合(每个元素都是独一无二的)</p><pre class=" language-python"><code class="language-python">favorite_languages <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>    <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>    <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">for</span> language <span class="token keyword">in</span> set<span class="token punctuation">(</span>favorite_languages<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>language<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>CRubyPython</code></pre><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><p>即将字典当成一个列表中的元素</p><pre class=" language-python"><code class="language-python">alien_0 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span><span class="token punctuation">,</span>    <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>alien_1 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span>    <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>alien_2 <span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'color'</span><span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    <span class="token string">'points'</span><span class="token punctuation">:</span> <span class="token number">15</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>aliens <span class="token operator">=</span> <span class="token punctuation">[</span>alien_0<span class="token punctuation">,</span> alien_1<span class="token punctuation">,</span> alien_2<span class="token punctuation">]</span><span class="token keyword">for</span> alien <span class="token keyword">in</span> aliens<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'green', 'points': 5&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'yellow', 'points': 10&amp;#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'color': 'red', 'points': 15&amp;#125;</span></code></pre><h3 id="在字典中存储列表"><a href="#在字典中存储列表" class="headerlink" title="在字典中存储列表"></a>在字典中存储列表</h3><p>即，有时候一个键需要多个对应的值时，可以采用字典存储列表的形式</p><pre class=" language-python"><code class="language-python">pizza <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'crust'</span><span class="token punctuation">:</span> <span class="token string">'thick'</span><span class="token punctuation">,</span>    <span class="token string">'toppings'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span><span class="token string">'extra cheese'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"you ordered a"</span> <span class="token operator">+</span> pizza<span class="token punctuation">[</span><span class="token string">'crust'</span><span class="token punctuation">]</span> <span class="token operator">+</span>     <span class="token string">"-crust pizza"</span> <span class="token operator">+</span> <span class="token string">"with the following topping"</span>    <span class="token punctuation">)</span><span class="token keyword">for</span> topping <span class="token keyword">in</span> pizza<span class="token punctuation">[</span><span class="token string">'toppings'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>you ordered athick<span class="token operator">-</span>crust pizzawith the following topping        mushrooms        extra cheese</code></pre><h3 id="在字典中存储字典"><a href="#在字典中存储字典" class="headerlink" title="在字典中存储字典"></a>在字典中存储字典</h3><p>例如，一个用户作为一个键，该用户的属性(性别，身高，体重…)作为键中对应的键，此时可以利用字典嵌套字典的方式来存储信息</p><pre class=" language-python"><code class="language-python">user <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'albert'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'eintein'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'princeton'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'marie'</span><span class="token punctuation">,</span>        <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'curie'</span><span class="token punctuation">,</span>        <span class="token string">'location'</span><span class="token punctuation">:</span> <span class="token string">'paris'</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true">#返回键值对</span><span class="token comment" spellcheck="true">#但是user_info作为值是一个字典</span><span class="token keyword">for</span> username<span class="token punctuation">,</span>user_info <span class="token keyword">in</span> user<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nUsername: "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span>    full_name <span class="token operator">=</span> user_info<span class="token punctuation">[</span><span class="token string">'first'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> user_info<span class="token punctuation">[</span><span class="token string">'last'</span><span class="token punctuation">]</span>    location <span class="token operator">=</span> user_info<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tFullname: "</span> <span class="token operator">+</span> full_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tlocation: "</span> <span class="token operator">+</span> location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出结果</span>Username<span class="token punctuation">:</span> a        Fullname<span class="token punctuation">:</span> Albert Eintein        location<span class="token punctuation">:</span> PrincetonUsername<span class="token punctuation">:</span> b        Fullname<span class="token punctuation">:</span> Marie Curie        location<span class="token punctuation">:</span> Paris</code></pre><p>​    此时的键值对中的值是作为一个字典返回回来的</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
