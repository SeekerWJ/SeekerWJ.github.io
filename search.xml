<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STM32通用定时器驱动SG90舵机</title>
    <url>/2020/09/24/STM32%E9%80%9A%E7%94%A8%E5%AE%9A%E6%97%B6%E5%99%A8%E9%A9%B1%E5%8A%A8SG90%E8%88%B5%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="SG90舵机的控制原理"><a href="#SG90舵机的控制原理" class="headerlink" title="SG90舵机的控制原理"></a>SG90舵机的控制原理</h2><p>舵机的控制一般需要一个20ms的时基脉冲，该脉冲的高电平部分一般为0.5ms~2.5ms范围内的角度控制脉冲部分。以180度角度舵机为例，那么对应的控制关系是这样的： </p>
<p>0.5ms————-0度；<br>1.0ms————45度；<br>1.5ms————90度；<br>2.0ms———–135度；<br>2.5ms———–180度； </p>
<p><img src="https://s1.ax1x.com/2020/09/24/0SubZR.gif" alt="0SubZR.gif"></p>
<p>所以，通过单片机输出相应的PWM信号即可控制舵机旋转相应的角度</p>
<a id="more"></a>

<h2 id="STM32通用定时器输出PWM信号配置"><a href="#STM32通用定时器输出PWM信号配置" class="headerlink" title="STM32通用定时器输出PWM信号配置"></a>STM32通用定时器输出PWM信号配置</h2><h3 id="定时器周期计算公式："><a href="#定时器周期计算公式：" class="headerlink" title="定时器周期计算公式："></a>定时器周期计算公式：</h3><p>T = （（Prescaler + 1） * （Period + 1） ） / TimeClockFren; </p>
<p>Prescaler：分频TIM时钟的预分频器值。 </p>
<p>Period：计数重载值，TIM计数当超过这个值，则重新计数。</p>
<p>TimeClockFren：定时器的输入时钟频率（单位MHZ），也就是当前使用的TIM所用的CLOK的时钟频率。 这里为72Mhz</p>
<p>需要20ms的时基脉冲 20ms = (7200*200)/72000000=0.02 </p>
<p>所以TIM_Period = 199，TIM_Prescaler = 7199 </p>
<h3 id="结构体初始化"><a href="#结构体初始化" class="headerlink" title="结构体初始化"></a>结构体初始化</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pwm_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//声明一个结构体变量，用来初始化GPIO</span>

    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明一个结构体变量，用来初始化定时器</span>

    TIM_OCInitTypeDef TIM_OCInitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据TIM_OCInitStruct中指定的参数初始化外设TIMx</span>

    <span class="token comment" spellcheck="true">/* 开启时钟 */</span>
    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM3<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*  配置GPIO的模式和IO口 */</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin<span class="token operator">=</span>GPIO_Pin_6<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// PA6</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed<span class="token operator">=</span>GPIO_Speed_50MHz<span class="token punctuation">;</span>
    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode<span class="token operator">=</span>GPIO_Mode_AF_PP<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复用推挽输出</span>
    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span><span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//TIM3定时器初始化</span>
    TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//PWM 频率=72000/(199+1)=36Khz//设置自动重装载寄存器周期的值</span>
    TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> <span class="token number">7199</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置用来作为TIMx时钟频率预分频值</span>
    TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置时钟分割:TDTS = Tck_tim</span>
    TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//TIM向上计数模式</span>
    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span> TIM_TimeBaseInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//PWM初始化      //根据TIM_OCInitStruct中指定的参数初始化外设TIMx</span>
    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode<span class="token operator">=</span>TIM_OCMode_PWM1<span class="token punctuation">;</span>
    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState<span class="token operator">=</span>TIM_OutputState_Enable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PWM输出使能</span>
    TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity<span class="token operator">=</span>TIM_OCPolarity_Low<span class="token punctuation">;</span>

    <span class="token function">TIM_OC1Init</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span><span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//注意此处初始化时TIM_OC1Init而不是TIM_OCInit，否则会出错。因为固件库的版本不一样。</span>
    <span class="token function">TIM_OC1PreloadConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_OCPreload_Enable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能或者失能TIMx在CCR1上的预装载寄存器</span>
    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使能或者失能TIMx外设</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>这里TIM_OCInitTypeDef.TIM_Pulse不用配置，而是在主函数中通过TIM_SetCompare1(TIMx,x)函数来修改他的值，已达到想要转动舵机角度的目的</p>
<p><em>TIMx_CCRx寄存器能够在任何时候通过软件进行更新以控制波形，这个通过软件写入控制波形的值是立即生效呢还是在定时器发生下一次更新事件时被更新的，是由TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_Enable)这条语句决定的！Enable就是下一次更新事件时被更新；Disable是立即生效</em></p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 定时器初始化 */</span>
    <span class="token function">pwm_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0度</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//90度</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//180度</span>
        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>最终效果如图</p>
<p><img src="https://s1.ax1x.com/2020/09/24/0SKGWT.gif" alt="0SKGWT.gif"></p>
]]></content>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>深深的进入当下</title>
    <url>/2021/01/12/%E6%B7%B1%E6%B7%B1%E7%9A%84%E8%BF%9B%E5%85%A5%E5%BD%93%E4%B8%8B/</url>
    <content><![CDATA[<h1 id="深深的进入当下"><a href="#深深的进入当下" class="headerlink" title="深深的进入当下"></a>深深的进入当下</h1><h2 id="不在思维中寻找自己"><a href="#不在思维中寻找自己" class="headerlink" title="不在思维中寻找自己"></a>不在思维中寻找自己</h2><ul>
<li>思维认同，它创造了一个虚假的自我，也就是小我，而这个虚假的自我替代了你真正的自我。而你真正的自我是根植与本体之中的。</li>
<li>小我的需求是无止尽的。它感到自己很脆弱，容易受到威胁，所以他一直生活在一种恐惧和缺乏的状态中。</li>
<li>小我喜欢将各种各样的的问题都转化为复杂的个人问题，它喜欢将自己与你的问题联系在一起，通过这种依托关系以便于加强它虚幻的自我感。所以，小我喜欢你无意识的大量地投资在痛苦和苦难中。</li>
<li>一旦认识到无意识的根本原因是思维认同和情感认同，你就可以逐步走出这个阴影了。你可以进入当下，这时，你就会允许思维的存在而不陷思维的陷阱中了。思维本身是个很好的工具，但不要从大脑思维中寻找自己，并认为它就是我自己，如果那样的话，他就会变成一种小我的思维，并且控制你的整个生活。</li>
</ul>
<a id="more"></a>

<h2 id="终结时间的幻象"><a href="#终结时间的幻象" class="headerlink" title="终结时间的幻象"></a>终结时间的幻象</h2><ul>
<li><p>时间和思维是密不可分的，从思维中去除时间，思维就会停止————除非你运用它。</p>
</li>
<li><p>当你与思维认同时，你就陷入了时间的陷阱，你会不由自主的完全生活在对过去的回忆和对未来的期待或恐惧之中。这样你的心思就会完全被过去和未来占据，而不愿意接收当下的时刻。实际上这两者都是幻象。</p>
</li>
<li><p>时间一点也不珍贵，因为他只是一种幻象。珍贵的东西不是时间，而是不在时间内的那一点，即当下。当下才是唯一珍贵的东西，因为作为生物来说，整个生命都是在这个永恒当下空间中展开的。</p>
</li>
<li><p>当下这一刻，当时间缺席时，你所有的问题都会消失。苦难只有在时间中才能存在，在当下它无法存活。</p>
</li>
</ul>
<h2 id="任何事物都不可能存在于当下时刻之外"><a href="#任何事物都不可能存在于当下时刻之外" class="headerlink" title="任何事物都不可能存在于当下时刻之外"></a>任何事物都不可能存在于当下时刻之外</h2><ul>
<li><p>没有任何事情可以发生在过去，也没有任何事情可以发生在未来，所有事情只能发生在当下。过去发生的事情是一个记忆的痕迹，它存储在大脑中，是过去的当下。当你记起过去发生的那件事，你就重新激活了那个记忆————而你是在当下做的这件事情。未来也只是一个幻象的当下，是思维对未来的投射。当未来来临时，它也是以当下的形式到来。当你思考未来时，你也是在当下做这件事。</p>
</li>
<li><p>过去和未来都没有现实性，就像月亮本来就不会发光一样，他只能反射太阳光，所有过去和未来仅是永恒当下的光线，力量和现实性的反射。过去和未来的现实性，力量都是从当下借过来的。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
</search>
